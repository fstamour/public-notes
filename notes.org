#+title: Notes
#+options: html-postamble:nil

* How to export this file to html

In emacs, open this file and type =C-c C-e h h=, it will create a
=notes.html= file.

* Amazon Web Services (AWS)

** Configuration

#+begin_src shell
  aws configure

  ###### OR

  export AWS_ACCESS_KEY_ID="..."
  export AWS_SECRET_ACCESS_KEY="..."
  export AWS_DEFAULT_REGION=ca-central-1
  export AWS_DEFAULT_OUTPUT=json
#+end_src

** ECR - Elastic Container Registry

*** login

#+begin_src shell
  # using aws cli v1
  aws ecr get-login-password --region region | \
   docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com
#+end_src


** Upload a file to an S3 bucket with public access


#+begin_src shell
  # using aws cli v1
  aws s3 cp --acl public-read FILENAME s3://BUCKET_NAME
#+end_src

* Fish shell

- save a function with ~funcsave the_function~

** Remove the greeting message

#+begin_src fish
set -U fish_greeting ""
#+end_src

Relatedly, you can define a function called ~fish_greeting~ (same name
as the variable if you want to run some custom commands (like
~fortune~, or ~task~) when starting an _interactive_ shell.

* FreeBSD

- on FreeBSD, =nslookup= is replaced by =host=

* When working on CI                                  :cloud:troubleshooting:

- Always put the commands in a script
  - Easier to run locally
  - Easier to edit (you can run a linter on the script)
  - Way more control on error handling and control flow in general
  - More control on the logging too
  - Helps a lot with escaping
- Are the submodules are initilized correctly?
  - Are they up-to-date?
- Are all the paths valid and correct?
- Is there anything cached between the builds?
- =/bin/sh: eval: line N: <FILE>: not found= but <FILE> exists
  - check if the shebang is valid
    - use ~#!/usr/bin/env ...~ (e.g. ~#!/usr/bin/env bash~), it's the
      most portable way, and it give a nicer error message
    - Is the interpreter installed? (e.g. =bash= is not installed by
      default on Alpine linux, NixOs, FreeBSD, etc.)
  - Check if there are CRLF (Windows end-of-lines)
  - Is the file marked as executable?
- When unix's =find= is available,

** Useful command to help debug

- To list all files recursivly: ~find /some/path -name 'file'
  2>/dev/null~
- To check end-of-lines: - ~dos2unix -i file1 file2 ...~
- To check executable flag:
  - ~stat file~
  - ~ls -l~
- To check executable flag and end-of-lines (watch out, it's _very_
  verbose): ~git ls-files --debug~

* bash on windows (git, msys, mingw)

- ~cygpath -w path~
- ~cygpath -u path~
