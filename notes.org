#+title: Notes
#+options: html-postamble:nil

* Amazon Web Services (AWS)

** Configuration

#+begin_src shell
  aws configure

  ###### OR

  export AWS_ACCESS_KEY_ID="..."
  export AWS_SECRET_ACCESS_KEY="..."
  export AWS_DEFAULT_REGION=ca-central-1
  export AWS_DEFAULT_OUTPUT=json
#+end_src

** ECR - Elastic Container Registry

*** login

#+begin_src shell
  # using aws cli v1
  aws ecr get-login-password --region region | \
   docker login --username AWS --password-stdin aws_account_id.dkr.ecr.region.amazonaws.com
#+end_src


** Upload a file to an S3 bucket with public access


#+begin_src shell
  # using aws cli v1
  aws s3 cp --acl public-read FILENAME s3://BUCKET_NAME
#+end_src

Effects of trailing slash et al. :
- Uploading ~index.html~ to ~s3://BUCKET_NAME~ will create a file
  ~index.html~ at the root of the bucket.
- Uploading ~index.html~ to ~s3://BUCKET_NAME/path~ will create a file
  named ~path~ at the root of the bucket.
- Uploading ~index.html to ~s3://BUCKET_NAME/path/~ will create a file
  named ~index.html~ in the folder ~path~.

* Fish shell

- save a function with ~funcsave the_function~

** Remove the greeting message

#+begin_src fish
set -U fish_greeting ""
#+end_src

Relatedly, you can define a function called ~fish_greeting~ (same name
as the variable if you want to run some custom commands (like
~fortune~, or ~task~) when starting an _interactive_ shell.

* FreeBSD                                                           :freebsd:

- on FreeBSD, =nslookup= is replaced by =host=

** Packages

- =pkg search ...=
- =pkg install ...=

When installing a package, there are often very useful message shown,
often about some optional manual step that you might wanna do. To see
these message use the command =pkg info --pkg-message package=.


* When working on CI                                  :cloud:troubleshooting:

- Always put the commands in a script
  - Easier to run locally
  - Easier to edit (you can run a linter on the script)
  - Way more control on error handling and control flow in general
  - More control on the logging too
  - Helps a lot with escaping
- Are the submodules are initialized correctly?
  - Are they up-to-date?
- Are all the paths valid and correct?
- Is there anything cached between the builds?
- =/bin/sh: eval: line N: <FILE>: not found= but <FILE> exists
  - check if the shebang is valid
    - use ~#!/usr/bin/env ...~ (e.g. ~#!/usr/bin/env bash~), it's the
      most portable way, and it give a nicer error message
    - Is the interpreter installed? (e.g. =bash= is not installed by
      default on Alpine Linux, NixOS, FreeBSD, etc.)
  - Check if there are CRLF (Windows end-of-lines)
  - Is the file marked as executable?
- When unix's =find= is available,

** Useful command to help debug

- To list all files recursively: ~find /some/path -name 'file'
  2>/dev/null~
- To check end-of-lines: - ~dos2unix -i file1 file2 ...~
- To check executable flag:
  - ~stat file~
  - ~ls -l~
- To check executable flag and end-of-lines (watch out, it's _very_
  verbose): ~git ls-files --debug~

* bash on windows (git, msys, mingw)

- ~cygpath -w path~
- ~cygpath -u path~

* Common lisp                                                   :common_lisp:

** Setup

1. https://www.quicklisp.org/beta/
2. =rlwrap sbcl --load quicklisp.lisp=
3. =(quicklisp-quickstart:install)=
4. =(ql:add-to-init-file)=
5. =(ql:quickload '(swank quicklisp-slime-helper clhs))=
6. =(clhs:install-clhs-use-local)=
7. =cd ~/quicklisp/local-projects/ &&
   git@github.com:fstamour/breeze.git=

*** FreeBSD specifics                                               :freebsd:

From =pkg info --pkg-message sbcl=:

#+begin_quote
If you plan to use Quicklisp, you must remove this line from
/usr/local/etc/sbclrc.
#+end_quote

The line in question is

#+begin_src lisp
  (load "/usr/local/etc/asdf-init.lisp")
#+end_src

Warning: when you comment this line in =/usr/local/etc/sbclrc=,
stumpwm will not work anymore if you installed it from FreeBSD's
packages.

* Git

** Go to the root of the repository

#+begin_src shell
cd "$(git rev-parse --show-toplevel)"
#+end_src

* Langages, orthrographe et grammaire

- A license (American English) or licence (British English and French)
- specially v.s. especially
- un "x-acto": utility knife, couteau Ã  lame, couteau tout usage

** Command line dictionaries

*** Grammalecte

pip install pygrammalecte # for french
I don't know how to use it in WSL

*** dict and dictd

sudo apt-get install -y dict

dict is an "online" dictionary, but it can be used with offline dictionaries
from the manual: dict is a client for the Dictionary Server Protocol (DICT)

alias thrus='dict -d moby-thesaurus'

*** ispell and aspell and hunspell

tl;dr: ispell < aspell < hunspell

In WSL, =sudo apt-get install -y dict ispell aspell=

In FreeBSD, =pkg install {fr-,en-}hunspell=

*** wordlist

- ls /usr/share/dict
- look at "wordlist" packages

[[https://pypi.org/project/cli-thesaurus/][cli-thesaurus]] looks nice, it uses thesaurus.com and dictionary.com

* How to export this file to html

In Emacs, open this file and type =C-c C-e h h=, it will create a
=notes.html= file.

* Emacs Org-Mode

[[https://orgmode.org/worg/dev/org-syntax.html][Org-mode syntax]]
